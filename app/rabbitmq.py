import threading
import base64
import pika
import logging
import time
import json
import zlib

# setting log
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

RABBITMQ_HOST = "SY_rabbitmq"
RABBITMQ_USER = "S@ony_devide0102"
RABBITMQ_PASS = "S@ony_devide0102"
QUEUE_NAME = "face_images"

# RabbitMQ connrttion function
def get_rabbitmq_connection():
    try:
        credentials = pika.PlainCredentials(RABBITMQ_USER, RABBITMQ_PASS)
        connection = pika.BlockingConnection(pika.ConnectionParameters(
            host=RABBITMQ_HOST,
            credentials=credentials,
            heartbeat=120  # timeout protaction
        ))
        channel = connection.channel()
        channel.queue_declare(queue=QUEUE_NAME, durable=True)
        logging.info("‚úÖ RabbitMQ connection established successfully")
        return connection, channel
    except Exception as e:
        logging.error(f"‚ùå Failed to connect to RabbitMQ: {type(e).__name__}: {e}")
        raise


# Send image to RabbitMQ
def send_image_to_rabbitmq(channel, image_bytes, camera_id):
    """ Use Thread to send images to RabbitMQ to reduce WebSocket latency. """
    thread = threading.Thread(target=send_to_rabbitmq, args=(channel, image_bytes, camera_id))
    thread.start()

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡∏¢‡∏±‡∏á RabbitMQ
def send_to_rabbitmq(channel, image_bytes, camera_id):
    """ Send images to RabbitMQ with Camera ID """
    try:
        print(f"üìå Debug: Size image_bytes ‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î: {len(image_bytes)} bytes")
        
        # ‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î Base64)
        compressed_data = zlib.compress(image_bytes, level=6)
        print(f"üìå Debug: ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á compressed_data ‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î: {len(compressed_data)} bytes")

        image_base64 = base64.b64encode(compressed_data).decode("utf-8")
        print(f"üìå Debug: ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á image_base64 ‡∏´‡∏•‡∏±‡∏á Base64 encode: {len(image_base64)} characters")

        message = {
            "camera_id": camera_id,
            "image": image_base64
        }

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á
        print(f"üì© Debug: Message ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤ RabbitMQ:\n{json.dumps(message)[:200]}...")  # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 200 ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ log ‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ

        # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á RabbitMQ
        channel.basic_publish(
            exchange="",
            routing_key=QUEUE_NAME,
            body=json.dumps(message),
            properties=pika.BasicProperties(
                delivery_mode=2,  # Persistent Message
            )
        )

        print(f"‚úÖ ‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á {camera_id} ‡πÑ‡∏õ‡∏¢‡∏±‡∏á RabbitMQ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

    except Exception as e:
        print(f"‚ùå ‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")

# ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ RabbitMQ ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
connection, channel = get_rabbitmq_connection()
